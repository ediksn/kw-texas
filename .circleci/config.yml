version: 2.1

executors:
  macos_exec:
    macos:
      xcode: 13.0

jobs:
  build:
    executor: << parameters.executor >>
    parameters: &build-parameters
      executor:
        type: executor
      platform:
        type: string
      dev:
        type: boolean
        default: false
    environment: &build-environment
      JAVA_OPTS: "-Xms512m -Xmx4096m"
      JAVA_HOME: "/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home"
      PLATFORM: << parameters.platform >>
      DEV: << parameters.dev >>
      HOMEBREW_NO_AUTO_UPDATE: 1
      ANDROID_HOME: "/usr/local/share/android-sdk"
      ANDROID_SDK_HOME: "/usr/local/share/android-sdk"
      ANDROID_SDK_ROOT: "/usr/local/share/android-sdk"
    working_directory: ~/build
    steps:
      - checkout
      - restore_cache: &restore_gem_cache
          name: Restore gem cache
          keys:
          - gem-cache-v1-{{ checksum "ios/Gemfile.lock" }}
          - gem-cache-v1-{{ arch }}-{{ .Branch }}
          - gem-cache-v1
      - run:
          name: Check prerequisites
          command: |
            .circleci/scripts/prepare-build.sh
      - save_cache: &save_gem_cache
          name: Save gem cache
          key: gem-cache-v1-{{ checksum "ios/Gemfile.lock" }}
          paths:
            - ios/bundle
      - run:
          name: Setup environment variables
          command: |
            .circleci/scripts/vars-set.sh
      - restore_cache: &restore_yarn_cache
          name: Restore yarn cache
          keys:
          - yarn-cache-v1-{{ checksum "yarn.lock" }}
          - yarn-cache-v1-{{ arch }}-{{ .Branch }}
          - yarn-cache-v1
      - run:
          name: Install dependencies
          command: |
            yarn install
      - save_cache: &save_yarn_cache
          name: Save yarn cache
          key: yarn-cache-v1-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run:
          name: Run lint
          command: |
            yarn run lint
      - when:
          condition:
            equal: [ ios, << parameters.platform >>]
          steps:
            - restore_cache: &restore_pod_cache
                name: Restore pod cache
                keys:
                - pod-cache-v1-{{ checksum "ios/Podfile.lock" }}
                - pod-cache-v1-{{ arch }}-{{ .Branch }}
                - pod-cache-v1
      - run:
          name: Build
          command: |
            cd ios && bundle exec fastlane $PLATFORM build
      - when:
          condition:
            equal: [ android, << parameters.platform >>]
          steps:
            - persist_to_workspace:
                root: .
                paths:
                  - bash_env
                  - android/app/build/outputs/apk/production/release/app-production-release.apk
                  - android/app/build/outputs/apk/staging/release/app-staging-release.apk
            - store_artifacts:
                path: ~/build/outputs/apk/production/release/app-production-release.apk
            - store_artifacts:
                path: ~/build/outputs/apk/staging/release/app-staging-release.apk
      - when:
          condition:
            equal: [ ios, << parameters.platform >>]
          steps:
            - save_cache: &save_pod_cache
                name: Save pod cache
                key: pod-cache-v1-{{ checksum "ios/Podfile.lock" }}
                paths:
                  - ios/Pods
            - persist_to_workspace:
                root: .
                paths:
                  - ios/*.ipa
            - store_artifacts:
                path: ~/build/ios/connectmobile.ipa
            - store_artifacts:
                path: ~/build/ios/connectmobile-dev.ipa
  push-appcenter:
    executor: << parameters.executor >>
    parameters:
      executor:
        type: executor
    working_directory: ~/build
    steps:
      - checkout
      - restore_cache: *restore_gem_cache
      - attach_workspace:
          at: ~/build
      - run:
          name: Import variables from build job
          command: |
            cat bash_env >> $BASH_ENV
      - run:
          name: Push to AppCenter
          command: |
            .circleci/scripts/push-appcenter.sh

workflows:
  build_push:
    jobs:
      - build:
          name: build-ios
          executor: macos_exec
          platform: ios
          filters: &build-filters
            branches:
              only:
                - develop
                - /^feature\/\S*$/
                - /^hotfix\/\S*$/
                - /^bugfix\/\S*$/
                - /^revert-\S*$/
                - /^release\/v\d+\.\d+\.\d+$/
      - build:
          name: build-ios-dev
          executor: macos_exec
          platform: ios
          dev: true
          filters: *build-filters
      - build:
          name: build-android
          executor: macos_exec
          platform: android
          filters: *build-filters
      - push-appcenter:
          executor: macos_exec
          requires:
            - build-ios
            - build-ios-dev
            - build-android
          filters:
            branches:
              only:
                - develop
                - /^release\/v\d+\.\d+\.\d+$/
